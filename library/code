struct PTable{
    int n;
    vector<int> table;
    PTable(int n):n(n){
        calc();
    }
    void calc(){
        table.resize(n+1,1);
        for(int i=2;i<=n;i++){
            if(table[i]!=1)continue;
            for(int j=i;j<=n;j+=i){
                table[j]=i;
            }
        }
    }
    //aが素数か判定
    int isPrime(int a) { if(a>=0)return a==table[a]&&a!=1;else return 0; }
    //aの最大の素因数を返して、aを割る
    int operator()(int &a){
        int x=table[a];
        a/=table[a];
        return x;
    }
    //素因数分解::pfact(数字,いれもの)->{{素因数,個数}}
    vector<pair<int,int>> pfact(int a,vector<pair<int,int>> b){
        int mem=0,cou=0;
        while(1){
            if(table[a]==1){
                b.push_back({mem,cou});
                break;
            }
            if(mem==table[a])cou++;
            else{
                if(cou!=0)b.push_back({mem,cou});
                mem=table[a];
                cou=1;
            }
            a/=table[a];
        }
        return b;
    }
    //euler(a)を返す
    int euler(int a){
        int res=0;
        for(int i=2;i<a;i++)if(table[i]==i)res++;
        return res;
    }
};